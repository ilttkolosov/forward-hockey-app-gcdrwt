// app/tournaments/index.tsx
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
} from 'react-native';
import SegmentedControl from '@react-native-segmented-control/segmented-control';
import { colors, commonStyles } from '../../styles/commonStyles';
import { fetchTournamentTable, getCachedTournamentTable, TournamentTable } from '../../services/tournamentsApi';
import { useNavigation, useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Icon from '../../components/Icon';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Image } from 'expo-image'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Image
import { loadTeamLogo } from '../../services/teamStorage'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URI –ª–æ–≥–æ—Ç–∏–ø–∞

const TOURNAMENTS_NOW_KEY = 'tournaments_now';
const TOURNAMENTS_PAST_KEY = 'tournaments_past';
const CURRENT_TOURNAMENT_ID_KEY = 'current_tournament_id';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ —á–∏—Å–ª—É
const getDeclension = (number: number, words: string[]): string => {
  const n = Math.abs(number);
  if (n % 10 === 1 && n % 100 !== 11) {
    return `${number} ${words[0]}`;
  }
  if (n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20)) {
    return `${number} ${words[1]}`;
  }
  return `${number} ${words[2]}`;
};

// –¢–∏–ø –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
interface TournamentTableRowWithLogo {
  team_id: string; // –∏–ª–∏ number, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ API
  position: string;
  team_name: string;
  games: string;
  wins: string;
  losses: string;
  draws: string;
  overtime_wins: string;
  overtime_losses: string;
  points_2x: string;
  pkpercent: string;
  logo_uri: string | null; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø: –ª–æ–≥–æ—Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ null
}

// –¢–∏–ø –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏
type TournamentTableWithLogos = TournamentTableRowWithLogo[];

export default function TournamentsScreen() {
  const [activeTab, setActiveTab] = useState<number>(0);
  const [tables, setTables] = useState<{
    current: { name: string; id: string; data: TournamentTableWithLogos[] }[];
    past: { name: string; id: string; data: TournamentTableWithLogos[] }[];
  }>({ current: [], past: [] });
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const router = useRouter();
  const navigation = useNavigation();

  useEffect(() => {
    console.log('üîÑ [Tournaments] useEffect –∑–∞–ø—É—â–µ–Ω');
    loadTournamentsFromCache();
  }, [activeTab]);

  const loadTournamentsFromCache = async () => {
    console.log('üîÑ [Tournaments] loadTournamentsFromCache –∑–∞–ø—É—â–µ–Ω');
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏–∑ –∫—ç—à–∞
      const cachedTournamentsNow = await AsyncStorage.getItem(TOURNAMENTS_NOW_KEY);
      console.log('üîÑ [Tournaments] –ó–∞–≥—Ä—É–∂–∞–µ–º current tournaments –∏–∑ –∫—ç—à–∞...');
      if (cachedTournamentsNow) {
        const currentTournaments = JSON.parse(cachedTournamentsNow);
        console.log(`‚úÖ [Tournaments] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${currentTournaments.length} —Ç–µ–∫—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –∫—ç—à–∞`);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã
        const currentData = await Promise.all(
          currentTournaments.map(async (t: any) => {
            console.log(`üîÑ [Tournaments] –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∫—ç—à–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞: ${t.tournament_Name} (${t.tournament_ID})`);
            const data = await getCachedTournamentTable(t.tournament_ID);
            console.log(`‚úÖ [Tournaments] –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ${t.tournament_Name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞`);
            const tableWithLogos = await addLogosToTable(data);
            console.log(`‚úÖ [Tournaments] –õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–∞–±–ª–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${t.tournament_Name}`);
            return {
              name: t.tournament_Name,
              id: String(t.tournament_ID),
              data: tableWithLogos,
            };
          })
        );
        console.log('‚úÖ [Tournaments] –í—Å–µ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏');
        setTables(prev => ({ ...prev, current: currentData }));
      } else {
        console.log('‚ùå [Tournaments] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö –≤ –∫—ç—à–µ');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏–∑ –∫—ç—à–∞ (–≤ —Ñ–æ–Ω–µ)
      const cachedTournamentsPast = await AsyncStorage.getItem(TOURNAMENTS_PAST_KEY);
      console.log('üîÑ [Tournaments] –ó–∞–≥—Ä—É–∂–∞–µ–º past tournaments –∏–∑ –∫—ç—à–∞...');
      if (cachedTournamentsPast) {
        const pastTournaments = JSON.parse(cachedTournamentsPast);
        console.log(`‚úÖ [Tournaments] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pastTournaments.length} –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –∫—ç—à–∞`);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã
        const pastData = await Promise.all(
          pastTournaments.map(async (t: any) => {
            console.log(`üîÑ [Tournaments] –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞: ${t.tournament_Name} (${t.tournament_ID})`);
            const data = await getCachedTournamentTable(t.tournament_ID);
            console.log(`‚úÖ [Tournaments] –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ${t.tournament_Name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞`);
            const tableWithLogos = await addLogosToTable(data);
            console.log(`‚úÖ [Tournaments] –õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–∞–±–ª–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${t.tournament_Name}`);
            return {
              name: t.tournament_Name,
              id: t.tournament_ID,
              data: tableWithLogos,
            };
          })
        );
        console.log('‚úÖ [Tournaments] –í—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏');
        setTables(prev => ({ ...prev, past: pastData }));
      } else {
        console.log('‚ùå [Tournaments] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö –≤ –∫—ç—à–µ');
      }
    } catch (e) {
      console.error('‚ùå [Tournaments] Error loading tournaments from cache:', e);
    } finally {
      setLoading(false);
      console.log('‚úÖ [Tournaments] setLoading(false) –≤—ã–∑–≤–∞–Ω');
    }
  };

  const onRefresh = async () => {
    console.log('üîÑ [Tournaments] pullToRefresh –∑–∞–ø—É—â–µ–Ω');
    setRefreshing(true);
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã (—á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à)
      const cachedTournamentsNow = await AsyncStorage.getItem(TOURNAMENTS_NOW_KEY);
      if (cachedTournamentsNow) {
        const currentTournaments = JSON.parse(cachedTournamentsNow);
        const currentData = await Promise.all(
          currentTournaments.map(async (t: any) => {
            console.log(`üîÑ [Tournaments] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞: ${t.tournament_Name} (${t.tournament_ID})`);
            const data = await fetchTournamentTable(t.tournament_ID); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            console.log(`‚úÖ [Tournaments] –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ${t.tournament_Name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            const tableWithLogos = await addLogosToTable(data);
            console.log(`‚úÖ [Tournaments] –õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${t.tournament_Name}`);
            return {
              name: t.tournament_Name,
              id: t.tournament_ID,
              data: tableWithLogos,
            };
          })
        );
        setTables(prev => ({ ...prev, current: currentData }));
        console.log('‚úÖ [Tournaments] –í—Å–µ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏');
      }
    } catch (e) {
      console.error('‚ùå [Tournaments] Error refreshing tournament ', e);
    } finally {
      setRefreshing(false);
      console.log('‚úÖ [Tournaments] pullToRefresh –∑–∞–≤–µ—Ä—à—ë–Ω');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URI –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ
  const addLogosToTable = async (table: TournamentTable[]): Promise<TournamentTableWithLogos> => {
    console.log(`üñºÔ∏è [Tournaments] –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ –∏–∑ ${table.length} —Å—Ç—Ä–æ–∫`);
    const tableWithLogos = await Promise.all(
      table.map(async (row) => {
        const logo_uri = await loadTeamLogo(row.team_id.toString()).catch((error) => {
            console.error(`‚ùå [Tournaments] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${row.team_id}:`, error);
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–∏–ø logo_uri —Ç–µ–ø–µ—Ä—å string | null
        });
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É TournamentTableRowWithLogo
        return {
          team_id: row.team_id,
          position: row.position,
          team_name: row.team_name,
          games: row.games,
          wins: row.wins,
          losses: row.losses,
          draws: row.draws,
          overtime_wins: row.overtime_wins,
          overtime_losses: row.overtime_losses,
          points_2x: row.points_2x,
          pkpercent: row.pkpercent,
          logo_uri, // –¢–µ–ø–µ—Ä—å logo_uri –º–æ–∂–µ—Ç –±—ã—Ç—å string –∏–ª–∏ null
        };
      })
    );
    console.log(`‚úÖ [Tournaments] –õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–∞–±–ª–∏—Ü–µ, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${tableWithLogos.length}`);
    return tableWithLogos;
  };

  const handleBackPress = () => {
    router.back();
  };

  const handleDetailsPress = (tournamentId: string) => {
    router.push(`/tournaments/${tournamentId}`);
  };

  const renderTable = (name: string, tournamentId: string, data: TournamentTableWithLogos[]) => {
    if (!data || !Array.isArray(data)) {
      console.log(`‚ö†Ô∏è [Tournaments] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${name}`);
      return null;
    }
    // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    return (
      <View key={tournamentId} style={styles.tableContainer}>
        <Text style={styles.tableTitle}>{name}</Text>
        <View style={styles.tableHeader}>
          <Text style={[styles.headerCell, styles.position]}></Text>
          <Text style={[styles.headerCell, styles.team]}></Text>
          <Text style={[styles.headerCell, styles.games]}>–ò</Text>
          <Text style={[styles.headerCell, styles.points]}>–û</Text>
        </View>
        {data.map((row: TournamentTableRowWithLogo, index) => ( // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏
          <View
            key={row.team_id}
            style={[
              styles.tableRow,
              index % 2 === 0 ? styles.evenRow : styles.oddRow
            ]}
          >
            <Text style={[styles.cell, styles.position]}>{row.position}</Text>
            <View style={styles.teamCellContent}>
              {row.logo_uri ? (
                <Image
                  source={{ uri: row.logo_uri }}
                  style={styles.teamLogo}
                />
              ) : (
                <View style={styles.teamLogoPlaceholder} />
              )}
              <Text style={[styles.cell, styles.teamName]}>{row.team_name}</Text>
            </View>
            <Text style={[styles.cell, styles.games]}>{row.games}</Text>
            <Text style={[styles.cell, styles.points]}>{row.points_2x}</Text>
          </View>
        ))}
        {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" */}
        <TouchableOpacity
          style={styles.detailButton}
          onPress={() => handleDetailsPress(String(tournamentId))} // –ü–µ—Ä–µ–¥–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞
        >
          <Text style={styles.detailButtonText}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Text>
        </TouchableOpacity>
      </View>
    );
  };

  if (loading) {
    console.log('üîÑ [Tournaments] –û—Ç–æ–±—Ä–∞–∂–∞–µ–º Loading...');
    return (
      <SafeAreaView style={commonStyles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={handleBackPress} style={styles.backButton}>
            <Icon name="chevron-back" size={24} color={colors.text} />
          </TouchableOpacity>
          <View style={styles.headerTitleContainer}>
            <Text style={commonStyles.title}>–¢—É—Ä–Ω–∏—Ä—ã</Text>
            <Text style={commonStyles.textSecondary}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
          </View>
          {/* –ü—É—Å—Ç–æ–π View –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
          <View style={styles.searchButton} />
        </View>
        <View style={commonStyles.loadingContainer}>
          <Text style={commonStyles.text}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={commonStyles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={handleBackPress} style={styles.backButton}>
          <Icon name="chevron-back" size={24} color={colors.text} />
        </TouchableOpacity>
        <View style={styles.headerTitleContainer}>
          <Text style={commonStyles.title}>–¢—É—Ä–Ω–∏—Ä—ã</Text>
          <Text style={commonStyles.textSecondary}>
            {activeTab === 0
              ? getDeclension(tables.current.length, ['—Ç–µ–∫—É—â–∏–π', '—Ç–µ–∫—É—â–∏—Ö', '—Ç–µ–∫—É—â–∏—Ö'])
              : getDeclension(tables.past.length, ['–ø—Ä–æ—à–µ–¥—à–∏–π', '–ø—Ä–æ—à–µ–¥—à–∏—Ö', '–ø—Ä–æ—à–µ–¥—à–∏—Ö'])
            }
          </Text>
        </View>
        {/* –ü—É—Å—Ç–æ–π View –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
        <View style={styles.searchButton} />
      </View>

      {/* Segmented Control */}
      <View style={{ paddingHorizontal: 16, paddingVertical: 8 }}>
        <SegmentedControl
          values={['–¢–µ–∫—É—â–∏–µ', '–ü—Ä–æ—à–µ–¥—à–∏–µ']}
          selectedIndex={activeTab}
          onChange={(event) => setActiveTab(event.nativeEvent.selectedSegmentIndex)}
          tintColor={colors.primary}
          fontStyle={{ fontSize: 14, fontWeight: '600' }}
          activeFontStyle={{ fontWeight: '700' }}
          springEnabled={false} // ‚Üê‚Üê‚Üê –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é "–ø—Ä—ã–∂–∫–∞"
        />
      </View>

      <ScrollView
        style={styles.contentContainer}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {activeTab === 0 && (
          <>
            {tables.current.length > 0 ? (
              tables.current.map(table => renderTable(table.name, table.id, table.data))
            ) : (
              <View style={commonStyles.errorContainer}>
                <Text style={commonStyles.text}>–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</Text>
                <Text style={commonStyles.textSecondary}>
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.
                </Text>
              </View>
            )}
          </>
        )}
        {activeTab === 1 && (
          <>
            {tables.past.length > 0 ? (
              tables.past.map(table => renderTable(table.name, table.id, table.data))
            ) : (
              <View style={commonStyles.errorContainer}>
                <Text style={commonStyles.text}>–ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</Text>
                <Text style={commonStyles.textSecondary}>
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.
                </Text>
              </View>
            )}
          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: colors.background,
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
    justifyContent: 'space-between',
  },
  backButton: {
    marginRight: 16,
    padding: 8,
  },
  headerTitleContainer: {
    flex: 1,
    alignItems: 'center',
  },
  searchButton: {
    padding: 8,
    marginLeft: 8,
  },
  contentContainer: {
    flex: 1,
    backgroundColor: colors.background,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.text,
    marginBottom: 16,
  },
  segmentedControl: {
    marginBottom: 20,
  },
  tableContainer: {
    marginBottom: 24,
    backgroundColor: colors.card,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    marginHorizontal: 16,
    marginTop: 12,
  },
  tableTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: colors.text,
    marginBottom: 12,
  },
  tableHeader: {
    flexDirection: 'row',
    // –£–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏–Ω–∏–∏ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    // borderBottomWidth: 1,
    // borderBottomColor: colors.border,
    paddingBottom: 8,
    marginBottom: 8,
  },
  headerCell: {
    textAlign: 'center',
    fontWeight: 'bold',
    color: colors.text,
  },
  position: {
    width: 30, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
  },
  team: {
    flex: 1, // –û—Å—Ç–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    textAlign: 'left', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
    paddingLeft: 8,
  },
  games: {
    width: 35, // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∏–≥—Ä
  },
  points: {
    width: 35, // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ—á–∫–æ–≤
    fontWeight: 'bold',
    fontSize: 15,
  },
  tableRow: {
    flexDirection: 'row',
    paddingVertical: 8,
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    borderTopWidth: 1,
    borderTopColor: colors.border,
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏
    alignItems: 'center',
  },
  evenRow: {
    backgroundColor: '#f0f0f0', // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è —á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  },
  oddRow: {
    backgroundColor: '#ffffff', // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  },
  cell: {
    textAlign: 'center',
    color: colors.text,
    // –£–±–∏—Ä–∞–µ–º flex: 1, —á—Ç–æ–±—ã —è—á–µ–π–∫–∏ —Å–ª–µ–¥–æ–≤–∞–ª–∏ —Å—Ç–∏–ª—è–º position, team, games, points
  },
  teamCellContent: {
    flex: 1, // –Ø—á–µ–π–∫–∞ "–ö–æ–º–∞–Ω–¥–∞" –¥–æ–ª–∂–Ω–∞ –∑–∞–Ω—è—Ç—å –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    flexDirection: 'row',
    alignItems: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    paddingLeft: 8,
  },
  teamLogo: {
    width: 24,
    height: 24,
    marginRight: 8,
    borderRadius: 0, // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ –ª–æ–≥–æ—Ç–∏–ø–∞
  },
  teamLogoPlaceholder: {
    width: 24,
    height: 24,
    marginRight: 8,
    borderRadius: 0, // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    backgroundColor: colors.border, // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
  },
  teamName: {
    color: colors.text,
    flex: 1, // –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏
    flexWrap: 'wrap', // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    textAlign: 'left', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
    fontSize: 16, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  },
  detailButton: {
    marginTop: 12,
    paddingVertical: 8,
    paddingHorizontal: 16,
    backgroundColor: colors.primary,
    borderRadius: 8,
    alignItems: 'center',
  },
  detailButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  emptyText: {
    textAlign: 'center',
    color: colors.text,
    fontSize: 16,
    marginTop: 20,
  },
});