// app/tournaments/[id].tsx - –í–ï–†–°–ò–Ø 7: –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º + —Å—á—ë—Ç—á–∏–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  RefreshControl,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { colors, commonStyles } from '../../styles/commonStyles';
import Icon from '../../components/Icon';
import LoadingSpinner from '../../components/LoadingSpinner';
import ErrorMessage from '../../components/ErrorMessage';
import AsyncStorage from '@react-native-async-storage/async-storage';
import SegmentedControl from '@react-native-segmented-control/segmented-control';
import GameCardCompact from '../../components/GameCardCompact';

// === –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ò–ì–† ===
import { getGames, gameDetailsCache, GAME_DETAILS_CACHE_DURATION } from '../../data/gameData';
import type { Game } from '../../types';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
import { fetchTournamentConfig, getCachedTournamentConfig, TournamentConfig } from '../../services/tournamentsApi';
import { apiService } from '../../services/apiService';

// –ö–ª—é—á–∏ –¥–ª—è AsyncStorage
const TOURNAMENTS_NOW_KEY = 'tournaments_now';
const TOURNAMENTS_PAST_KEY = 'tournaments_past';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: colors.background,
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
  },
  backButton: {
    marginRight: 16,
    padding: 8,
  },
  headerTitle: {
    flex: 1,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: colors.text,
  },
  subtitle: {
    fontSize: 14,
    color: colors.textSecondary,
    marginTop: 2,
  },
  content: {
    flex: 1,
  },
  segmentedContainer: {
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  tabContent: {
    padding: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.textSecondary,
    marginTop: 16,
  },
  value: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.text,
    marginBottom: 8,
  },
});

export default function TournamentDetailScreen() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
  const [tournamentInfo, setTournamentInfo] = useState<any | null>(null);
  const [tournamentConfig, setTournamentConfig] = useState<TournamentConfig | null>(null);
  const [seasonDetails, setSeasonDetails] = useState<any | null>(null);
  const [leagueDetails, setLeagueDetails] = useState<any | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä
  const [tournamentGames, setTournamentGames] = useState<Game[]>([]);
  const [gamesLoading, setGamesLoading] = useState(false);

  // === –ù–û–í–û–ï: –°—á—ë—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
  const [filterCounts, setFilterCounts] = useState({
    current: 0,
    upcoming: 0,
    past: 0,
  });

  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);
  const [activeTab, setActiveTab] = useState(0); // 0 ‚Äî –ò–≥—Ä—ã, 1 ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

  // === –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä –∏–≥—Ä ===
  const [gameFilter, setGameFilter] = useState<'current' | 'upcoming' | 'past'>('current');

  // === –§–£–ù–ö–¶–ò–Ø –ü–û–î–°–ß–Å–¢–ê –°–ß–Å–¢–ß–ò–ö–û–í ===
  const calculateFilterCounts = useCallback((games: Game[]) => {
    const now = new Date();
    let current = 0, upcoming = 0, past = 0;

    games.forEach(game => {
      const gameDate = new Date(game.event_date);
      // –¢–µ–∫—É—â–∏–µ: ¬±3 –¥–Ω—è
      const threeDaysAgo = new Date(now);
      threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
      const threeDaysAhead = new Date(now);
      threeDaysAhead.setDate(threeDaysAhead.getDate() + 3);

      if (gameDate >= threeDaysAgo && gameDate <= threeDaysAhead) {
        current++;
      }
      if (gameDate >= now) {
        upcoming++;
      }
      if (gameDate < now) {
        past++;
      }
    });

    setFilterCounts({ current, upcoming, past });
  }, []);

  // === –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò ===
  const loadTournamentInfo = useCallback(async () => {
    if (!id) {
      console.warn('‚ö†Ô∏è [TournamentDetail] ID —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è loadTournamentInfo');
      return null;
    }
    console.log(`üîç [TournamentDetail] –ó–∞–≥—Ä—É–∑–∫–∞ –û–°–ù–û–í–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID: "${id}"`);
    try {
      const [nowJson, pastJson] = await Promise.all([
        AsyncStorage.getItem(TOURNAMENTS_NOW_KEY),
        AsyncStorage.getItem(TOURNAMENTS_PAST_KEY),
      ]);
      let tournaments: any[] = [];
      if (nowJson) {
        const parsedNow = JSON.parse(nowJson);
        tournaments = tournaments.concat(parsedNow);
      }
      if (pastJson) {
        const parsedPast = JSON.parse(pastJson);
        tournaments = tournaments.concat(parsedPast);
      }
      const found = tournaments.find(t => String(t.tournament_ID) === id);
      return found || null;
    } catch (err) {
      console.error('üí• [TournamentDetail] –û—à–∏–±–∫–∞ –≤ loadTournamentInfo:', err);
      return null;
    }
  }, [id]);

  const loadTournamentConfig = useCallback(async () => {
    if (!id) {
      console.warn('‚ö†Ô∏è [TournamentDetail] ID —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è loadTournamentConfig');
      return null;
    }
    console.log(`üîç [TournamentDetail] –ó–∞–≥—Ä—É–∑–∫–∞ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID: "${id}"`);
    try {
      let config = await getCachedTournamentConfig(id);
      if (!config) {
        config = await fetchTournamentConfig(id);
      }
      return config || null;
    } catch (err) {
      console.error('üí• [TournamentDetail] –û—à–∏–±–∫–∞ –≤ loadTournamentConfig:', err);
      return null;
    }
  }, [id]);

  const loadTournamentGames = useCallback(
    async (force = false) => {
      if (!tournamentConfig?.league_id || !tournamentConfig?.season_id) {
        console.warn('‚ö†Ô∏è [TournamentDetail] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç league_id –∏–ª–∏ season_id');
        setTournamentGames([]);
        calculateFilterCounts([]); // ‚Üê —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–æ–≤
        return;
      }

      const leagueIdStr = String(tournamentConfig.league_id);
      const seasonIdStr = String(tournamentConfig.season_id);
      console.log(`üéÆ [TournamentDetail] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä –¥–ª—è league=${leagueIdStr}, season=${seasonIdStr}, force=${force}`);

      setGamesLoading(true);
      try {
        const games = await getGames({
          league: leagueIdStr,
          season: seasonIdStr,
          useCache: !force,
        });
        console.log(`‚úÖ [TournamentDetail] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${games.length} –∏–≥—Ä –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞`);

        // === üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç + –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—ç—à–∞ ===
        const now = Date.now();
        games.forEach((game) => {
          gameDetailsCache[game.id] = {
            data: game, // ‚Üê –ö–õ–Æ–ß–ï–í–û–ï: "data", –∞ –Ω–µ "game"
            timestamp: now,
          };
        });
        console.log(`üíæ [TournamentDetail] –í—Å–µ ${games.length} –∏–≥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ gameDetailsCache –ø–æ ID`);

        setTournamentGames(games);
        calculateFilterCounts(games); // ‚Üê –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–Å–¢–ß–ò–ö–ò
      } catch (err) {
        console.error('üí• [TournamentDetail] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', err);
        setTournamentGames([]);
        calculateFilterCounts([]); // ‚Üê —Å–±—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      } finally {
        setGamesLoading(false);
      }
    },
    [tournamentConfig, calculateFilterCounts]
  );

  const loadData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      console.log(`üîÑ [TournamentDetail] –ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID: "${id}"`);

      const [info, config] = await Promise.all([
        loadTournamentInfo(),
        loadTournamentConfig(),
      ]);

      if (!info) throw new Error('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      if (!config) throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (league_id, season_id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

      setTournamentInfo(info);
      setTournamentConfig(config);

      const seasonDetails = apiService.getSeasonById(String(config.season_id));
      const leagueDetails = apiService.getLeagueById(String(config.league_id));
      setSeasonDetails(seasonDetails);
      setLeagueDetails(leagueDetails);

      console.log(`‚úÖ [TournamentDetail] –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
    } catch (err: any) {
      console.error('üí• [TournamentDetail] –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }, [id, loadTournamentInfo, loadTournamentConfig]);

  useEffect(() => {
    if (activeTab === 0 && tournamentConfig && tournamentGames.length === 0 && !gamesLoading) {
      console.log(`ÌÉ≠ [TournamentDetail] –ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–ò–≥—Ä—ã" ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–≥—Ä`);
      loadTournamentGames();
    }
  }, [activeTab, tournamentConfig, tournamentGames.length, gamesLoading, loadTournamentGames]);

  useEffect(() => {
    if (id) {
      loadData();
    } else {
      setError('ID —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      setLoading(false);
    }
  }, [id, loadData]);

  const onRefresh = () => {
    setRefreshing(true);
    loadData();
    if (activeTab === 0) {
      loadTournamentGames(true);
    }
  };

  const handleBackPress = () => {
    router.back();
  };

  // === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò–ì–† ===
  const filteredGames = useMemo(() => {
    const now = new Date();
    return tournamentGames.filter((game) => {
      const gameDate = new Date(game.event_date);
      switch (gameFilter) {
        case 'current':
          const threeDaysAgo = new Date(now);
          threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
          const threeDaysAhead = new Date(now);
          threeDaysAhead.setDate(threeDaysAhead.getDate() + 3);
          return gameDate >= threeDaysAgo && gameDate <= threeDaysAhead;
        case 'upcoming':
          return gameDate >= now;
        case 'past':
          return gameDate < now;
        default:
          return true;
      }
    });
  }, [tournamentGames, gameFilter]);

  // === –†–ï–ù–î–ï–† –ó–ê–ì–†–£–ó–ö–ò / –û–®–ò–ë–ö–ò ===
  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <LoadingSpinner />
      </SafeAreaView>
    );
  }

  if (error) {
    return (
      <SafeAreaView style={styles.container}>
        <ErrorMessage message={error} onRetry={loadData} />
      </SafeAreaView>
    );
  }

  // === –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
  const tournamentName = tournamentInfo?.tournament_Name ? String(tournamentInfo.tournament_Name) : '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
  const leagueName = tournamentInfo?.league_name ? String(tournamentInfo.league_name) : '–í—Å–µ –∏–≥—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={handleBackPress}>
          <Icon name="chevron-back" size={24} color={colors.text} />
        </TouchableOpacity>
        <View style={styles.headerTitle}>
          <Text style={styles.title} numberOfLines={1} ellipsizeMode="tail">
            {tournamentName}
          </Text>
          <Text style={styles.subtitle} numberOfLines={1} ellipsizeMode="tail">
            {leagueName}
          </Text>
        </View>
      </View>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
      <View style={styles.segmentedContainer}>
        <SegmentedControl
          values={['–ò–≥—Ä—ã', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']}
          selectedIndex={activeTab}
          onChange={(event) => setActiveTab(event.nativeEvent.selectedSegmentIndex)}
          tintColor={colors.primary}
          fontStyle={{ fontSize: 14, fontWeight: '600' }}
          activeFontStyle={{ fontWeight: '700' }}
          springEnabled={false}
        />
      </View>

      <ScrollView
        style={styles.content}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
        showsVerticalScrollIndicator={false}
      >
        {/* –í–∫–ª–∞–¥–∫–∞ "–ò–≥—Ä—ã" */}
        {activeTab === 0 && (
          <View style={styles.tabContent}>
            {/* –§–∏–ª—å—Ç—Ä –∏–≥—Ä —Å —Å—á—ë—Ç—á–∏–∫–∞–º–∏ */}
            <View style={{ marginBottom: 16 }}>
              <SegmentedControl
                values={[
                  `–¢–µ–∫—É—â–∏–µ (${filterCounts.current})`,
                  `–ë—É–¥—É—â–∏–µ (${filterCounts.upcoming})`,
                  `–ü—Ä–æ—à–µ–¥—à–∏–µ (${filterCounts.past})`,
                ]}
                selectedIndex={
                  gameFilter === 'current' ? 0 :
                  gameFilter === 'upcoming' ? 1 : 2
                }
                onChange={(event) => {
                  const index = event.nativeEvent.selectedSegmentIndex;
                  setGameFilter(index === 0 ? 'current' : index === 1 ? 'upcoming' : 'past');
                }}
                tintColor={colors.primary}
                fontStyle={{ fontSize: 13, fontWeight: '500' }}
                activeFontStyle={{ fontWeight: '700' }}
                springEnabled={false}
              />
            </View>

            {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä */}
            {gamesLoading ? (
              <LoadingSpinner />
            ) : filteredGames.length > 0 ? (
              filteredGames.map((game) => (
                <GameCardCompact key={game.id} game={game} showScore={true} />
              ))
            ) : (
              <Text style={[commonStyles.text, { textAlign: 'center', marginTop: 24 }]}>
                {gameFilter === 'current' && '–ù–µ—Ç –∏–≥—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –∏ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è'}
                {gameFilter === 'upcoming' && '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä'}
                {gameFilter === 'past' && '–ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä'}
              </Text>
            )}
          </View>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" */}
        {activeTab === 1 && (
          <View style={styles.tabContent}>
            <Text style={commonStyles.text}>üìä –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</Text>
          </View>
        )}

        {/* –û—Ç—Å—Ç—É–ø –≤–Ω–∏–∑—É */}
        <View style={{ height: 32 }} />
      </ScrollView>
    </SafeAreaView>
  );
}