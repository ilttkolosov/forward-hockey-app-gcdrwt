// components/GameCard.tsx

import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
} from 'react-native';
import { Game } from '../types'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ Game –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
import { colors, commonStyles } from '../styles/commonStyles'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ —Å—Ç–∏–ª–∏
import { useRouter } from 'expo-router';

interface GameCardProps {
  game: Game; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–∏–ø Game
  showScore?: boolean;
}

export default function GameCard({ game, showScore = true }: GameCardProps) {
  const router = useRouter();

  const handlePress = () => {
    console.log('GameCard pressed, navigating to game:', game.id);
    router.push(`/game/${game.id}`);
  };

  // --- –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ù–û–í–´–• –î–ê–ù–ù–´–• ---
  if (!game) {
    console.warn('GameCard received undefined game prop');
    return null;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Game
  const {
    id,
    homeTeam,
    awayTeam,
    homeTeamLogo, // URI –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    awayTeamLogo, // URI –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    date, // –£–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ gameData.ts
    time, // –£–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ gameData.ts
    venue,
    status, // –°—Ç–∞—Ç—É—Å –∏–∑ gameData.ts
    tournament,
    homeScore,
    awayScore,
    sp_video,
    homeOutcome,
    awayOutcome,
    event_date, // –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    team1_first,
    team1_second,
    team1_third,
    team2_first,
    team2_second,
    team2_third,
  } = game;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
  const homeTeamName = homeTeam?.name || '‚Äî';
  const awayTeamName = awayTeam?.name || '‚Äî';

  // --- –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –ò –ë–ï–ô–î–ñ–ï–ô (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞) ---
  const getGameStatus = (gameDateStr: string) => {
    const now = new Date();
    const gameDate = new Date(gameDateStr);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
    const isToday = gameDate.toDateString() === now.toDateString();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Ö–æ–¥–∏—Ç –ª–∏ –∏–≥—Ä–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è
    const daysDiff = Math.ceil((gameDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    const isWithin3Days = daysDiff >= 0 && daysDiff <= 3;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ –∂–∏–≤–æ–π (5 –º–∏–Ω—É—Ç –¥–æ + 90 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ)
    const liveStart = new Date(gameDate.getTime() - 5 * 60 * 1000); // ‚Äì5 –º–∏–Ω
    const liveEnd = new Date(gameDate.getTime() + 90 * 60 * 1000); // +90 –º–∏–Ω
    const isLive = now >= liveStart && now <= liveEnd;

    return { isToday, isWithin3Days, isLive };
  };

  const getStatusColor = (status: Game['status'], isLive?: boolean) => {
    if (isLive) return colors.success; // Green for LIVE
    switch (status) {
      case 'live':
        return colors.success;
      case 'upcoming':
        return colors.warning;
      case 'finished':
        return colors.textSecondary;
      default:
        return colors.textSecondary;
    }
  };

  const getStatusText = (status: Game['status'], isToday?: boolean, isWithin3Days?: boolean, isLive?: boolean) => {
    if (isLive) return 'LIVE';

    // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–π–¥–∂–µ–π –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä
    if (status === 'upcoming') {
      if (isToday) return '–°–ï–ì–û–î–ù–Ø';
      if (isWithin3Days) return '–°–ö–û–†–û';
      return '–ü–†–ï–î–°–¢–û–Ø–©–ê–Ø';
    }

    switch (status) {
      case 'live':
        return 'LIVE';
      case 'finished':
        return ''; // –£–±–∏—Ä–∞–µ–º "–ó–ê–í–ï–†–®–ï–ù–ê" –±–µ–π–¥–∂ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä
      default:
        return '';
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä
  const { isToday, isWithin3Days, isLive } = status === 'upcoming' ? getGameStatus(event_date) : { isToday: false, isWithin3Days: false, isLive: status === 'live' };
  const statusText = getStatusText(status, isToday, isWithin3Days, isLive);

  // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ö–æ–¥–æ–º –∏–≥—Ä—ã (outcome) ---
  const getOutcomeText = (outcome: string | undefined): string => {
    switch (outcome) {
      case 'win':
        return '–ü–æ–±–µ–¥–∞';
      case 'loss':
        return '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
      case 'draw':
        return '–ù–∏—á—å—è';
      // case 'nich': // –ï—Å–ª–∏ 'nich' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ 'draw'
      //   return '–ù–∏—á—å—è';
      default:
        return outcome || '';
    }
  };

  // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–∏–≥–∏ (tournament) ---
  const getLeagueDisplayName = (leagueName: string | undefined): string => {
    if (!leagueName || leagueName.trim() === '') {
      return '–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∏–π –º–∞—Ç—á';
    }
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
     const parts = leagueName.split(':');
     if (parts.length > 1) {
       const namePart = parts[1].trim();
       const words = namePart.split(',')[0].trim();
       const firstWord = words.split(' ')[0];
       return firstWord;
     }
    // return leagueName.split(',')[0].trim();
    return leagueName; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
  };

  // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò ---

  return (
    <TouchableOpacity onPress={handlePress} activeOpacity={0.7}>
      <View style={commonStyles.gameCard}>
        {/* Header */}
        <View style={styles.header}>
          {statusText && (
            <View style={[styles.statusBadge, { backgroundColor: getStatusColor(status, isLive) }]}>
              <Text style={styles.statusText}>{statusText}</Text>
            </View>
          )}
          <Text style={commonStyles.textSecondary}>
            {date}
            {time && time !== '00:00' && (
              <>
                {' ‚Ä¢ '}
                {time}
              </>
            )}
          </Text>
        </View>

        {/* Teams */}
        <View style={styles.teamsContainer}>
          {/* Home Team Container */}
          <View style={styles.teamContainer}>
            {homeTeamLogo ? (
              <Image 
                source={{ uri: homeTeamLogo }} 
                style={styles.teamLogo}
                resizeMode="contain"
              />
            ) : (
              <View style={styles.placeholderLogo}>
                <Text style={styles.placeholderText}>
                  {homeTeamName.charAt(0)}
                </Text>
              </View>
            )}
            <Text style={styles.teamName} numberOfLines={2}>
              {homeTeamName}
            </Text>
            {showScore && homeScore !== undefined && (
              <Text style={styles.score}>{homeScore}</Text>
            )}
            {/* Outcome Badge centered under team name */}
            {homeOutcome && (
              <View style={styles.outcomeBadgeContainer}>
                <Text style={[styles.outcomeText, { 
                  color: homeOutcome === 'win' ? colors.success : 
                         homeOutcome === 'loss' ? colors.error : colors.warning 
                }]}>
                  {getOutcomeText(homeOutcome)}
                </Text>
              </View>
            )}
          </View>

          {/* VS Section - Aligned with bottom of team names */}
          <View style={styles.vsSection}>
            <Text style={styles.vsText}>VS</Text>
          </View>

          {/* Away Team Container */}
          <View style={styles.teamContainer}>
            {awayTeamLogo ? (
              <Image 
                source={{ uri: awayTeamLogo }} 
                style={styles.teamLogo}
                resizeMode="contain"
              />
            ) : (
              <View style={styles.placeholderLogo}>
                <Text style={styles.placeholderText}>
                  {awayTeamName.charAt(0)}
                </Text>
              </View>
            )}
            <Text style={styles.teamName} numberOfLines={2}>
              {awayTeamName}
            </Text>
            {showScore && awayScore !== undefined && (
              <Text style={styles.score}>{awayScore}</Text>
            )}
            {/* Outcome Badge centered under team name */}
            {awayOutcome && (
              <View style={styles.outcomeBadgeContainer}>
                <Text style={[styles.outcomeText, { 
                  color: awayOutcome === 'win' ? colors.success : 
                         awayOutcome === 'loss' ? colors.error : colors.warning 
                }]}>
                  {getOutcomeText(awayOutcome)}
                </Text>
              </View>
            )}
          </View>
        </View>

        {/* Footer */}
        <View style={styles.footer}>
          <View style={styles.gameInfo}>
            {venue && (
              <Text style={commonStyles.textSecondary} numberOfLines={1}>
                üìç {typeof venue === 'string' ? venue : venue.name}
              </Text>
            )}
            <Text style={[commonStyles.textSecondary, styles.leagueText]} numberOfLines={1}>
              {(!tournament || tournament.trim() === '') ? 'ü§ù ' : 'üèÜ '}{getLeagueDisplayName(tournament)}
            </Text>
            {/* Season field removed as requested */}
          </View>
        </View>
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    color: colors.background,
    fontSize: 12,
    fontWeight: '700',
  },
  teamsContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  teamContainer: {
    flex: 1,
    alignItems: 'center',
    paddingHorizontal: 8,
  },
  teamLogo: {
    width: 48,
    height: 48,
    marginBottom: 8,
    //borderRadius: 24,
  },
  placeholderLogo: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: colors.border,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  placeholderText: {
    fontSize: 20,
    fontWeight: '700',
    color: colors.textSecondary,
  },
  teamName: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.text,
    textAlign: 'center',
    marginBottom: 8,
    minHeight: 36, // –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ
  },
  score: {
    fontSize: 24,
    fontWeight: '800',
    color: colors.primary,
    marginBottom: 4,
  },
  outcomeBadgeContainer: {
    alignItems: 'center',
  },
  outcomeText: {
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
  },
  // VS Section - Positioned to align with bottom of team names
  vsSection: {
    paddingHorizontal: 16,
    justifyContent: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    //justifyContent: 'flex-start',
    paddingTop: 25, // Logo (48px) + margin (8px) = 56px to align with team names. 
                        // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º marginBottom —É teamName –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.
  },
  vsText: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.textSecondary,
    // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é teamName. 
    // –ü–æ—Å–∫–æ–ª—å–∫—É teamName –∏–º–µ–µ—Ç minHeight –∏ marginBottom, 
    // VS –±—É–¥–µ—Ç –≤—ã—Ä–æ–≤–Ω–µ–Ω –ø–æ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞.
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å absolute –∏–ª–∏ adjust.
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –≥–∏–±–∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å.
  },
  footer: {
    marginTop: 8,
  },
  gameInfo: {
    gap: 4,
  },
  leagueText: {
    fontSize: 12,
    fontStyle: 'italic',
  },
});