// data/gameData.ts

import AsyncStorage from '@react-native-async-storage/async-storage';
import { Game, Team } from '../types'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ types/index.ts
import { apiService } from '../services/apiService';
import { ApiEvent, ApiGameDetailsResponse, ApiVenue} from '../types/apiTypes'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã
import { loadTeamLogo, loadTeamList, saveTeamList } from '../services/teamStorage';
// --- –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —Ñ–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---

const LEAGUES_CACHE_KEY = 'leagues_cache';
const SEASONS_CACHE_KEY = 'seasons_cache';
const VENUES_CACHE_KEY = 'venues_cache';

// –£–î–ê–õ–Ø–ï–ú: TEAMS_CACHE_KEY ‚Äî –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
//const TEAMS_CACHE_KEY = 'teams_cache'; // –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API



// --- –ö–≠–® –î–õ–Ø getGames ---
let gamesCache: { [key: string]: { data: Game[]; timestamp: number } } = {};
const GAMES_CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
// --- –ö–û–ù–ï–¶ –ö–≠–®–ê ---

// --- –ö–≠–® –î–õ–Ø –î–ï–¢–ê–õ–ï–ô –ò–ì–† ---
let gameDetailsCache: { [gameId: string]: { data: Game; timestamp: number } } = {};
const GAME_DETAILS_CACHE_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
// --- –ö–û–ù–ï–¶ –ö–≠–®–ê ---

// --- –ö–≠–® –î–õ–Ø –ú–ê–°–¢–ï–†-–î–ê–ù–ù–´–• –ü–†–ï–î–°–¢–û–Ø–©–ò–• –ò–ì–† ---
let upcomingGamesMasterCache: { data: Game[]; timestamp: number } | null = null;
const UPCOMING_MASTER_CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
let isMasterDataLoading = false; // <-- –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
let masterDataLoadPromise: Promise<Game[]> | null = null; // <-- Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
// --- –ö–û–ù–ï–¶ –ö–≠–®–ê ---

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
// --- –ö–û–ù–ï–¶ –ö–û–ù–°–¢–ê–ù–¢ ---

// --- –¢–ò–ü–´ –î–õ–Ø –ö–≠–®–ê ---
interface CachedData<T> {
  data: T; // <-- –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º T
  timestamp: number;
}
// --- –ö–û–ù–ï–¶ –¢–ò–ü–û–í –î–õ–Ø –ö–≠–®–ê ---

// –§–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let leaguesLoaded = false;
let seasonsLoaded = false;
let venuesLoaded = false;
let teamsLoaded = false; // –î–ª—è –∫–æ–º–∞–Ω–¥

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ AsyncStorage)
let cachedLeagues: Record<string, any> = {}; // –¢–∏–ø –±—É–¥–µ—Ç ApiLeague –∏–∑ apiService
let cachedSeasons: Record<string, any> = {}; // –¢–∏–ø –±—É–¥–µ—Ç ApiSeason –∏–∑ apiService
let cachedVenues: Record<string, any> = {}; // –¢–∏–ø –±—É–¥–µ—Ç ApiVenue –∏–∑ apiService
let cachedTeams: Record<string, Team> = {}; // –¢–∏–ø –∏–∑ types/index.ts

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
const safeInt = (value: any): number => {
  const num = parseInt(value as string, 10);
  return isNaN(num) ? 0 : num;
};


// --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –ª–∏–≥–∏ –∏–∑ API –∏ AsyncStorage
 */
export const loadLeagues = async (): Promise<void> => {
  if (leaguesLoaded) return;

  try {
    const cachedData = await AsyncStorage.getItem(LEAGUES_CACHE_KEY);
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      cachedLeagues = parsed.data.reduce((acc: Record<string, any>, league: any) => {
        acc[league.id] = league;
        return acc;
      }, {});
      leaguesLoaded = true;
      console.log('‚úÖ Leagues loaded from cache');
      return;
    }

    const response = await apiService.fetchLeagues();
    cachedLeagues = response.data.reduce((acc: Record<string, any>, league: any) => {
      acc[league.id] = league;
      return acc;
    }, {});
    await AsyncStorage.setItem(LEAGUES_CACHE_KEY, JSON.stringify({ data: response.data, timestamp: Date.now() }));
    leaguesLoaded = true;
    console.log('‚úÖ Leagues loaded and cached');
  } catch (error) {
    console.error('‚ùå Failed to load leagues:', error);
  }
};

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω—ã –∏–∑ API –∏ AsyncStorage
 */
export const loadSeasons = async (): Promise<void> => {
  if (seasonsLoaded) return;

  try {
    const cachedData = await AsyncStorage.getItem(SEASONS_CACHE_KEY);
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      cachedSeasons = parsed.data.reduce((acc: Record<string, any>, season: any) => {
        acc[season.id] = season;
        return acc;
      }, {});
      seasonsLoaded = true;
      console.log('‚úÖ Seasons loaded from cache');
      return;
    }

    const response = await apiService.fetchSeasons();
    cachedSeasons = response.data.reduce((acc: Record<string, any>, season: any) => {
      acc[season.id] = season;
      return acc;
    }, {});
    await AsyncStorage.setItem(SEASONS_CACHE_KEY, JSON.stringify({ data: response.data, timestamp: Date.now() }));
    seasonsLoaded = true;
    console.log('‚úÖ Seasons loaded and cached');
  } catch (error) {
    console.error('‚ùå Failed to load seasons:', error);
  }
};

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–∑ API –∏ AsyncStorage
 */
export const loadVenues = async (): Promise<void> => {
  if (venuesLoaded) return;

  try {
    const cachedData = await AsyncStorage.getItem(VENUES_CACHE_KEY);
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      cachedVenues = parsed.data.reduce((acc: Record<string, any>, venue: any) => {
        acc[venue.id] = venue;
        return acc;
      }, {});
      venuesLoaded = true;
      console.log('‚úÖ Venues loaded from cache');
      return;
    }

    const response = await apiService.fetchVenues();
    cachedVenues = response.data.reduce((acc: Record<string, any>, venue: any) => {
      acc[venue.id] = venue;
      return acc;
    }, {});
    await AsyncStorage.setItem(VENUES_CACHE_KEY, JSON.stringify({ data: response.data, timestamp: Date.now() }));
    venuesLoaded = true;
    console.log('‚úÖ Venues loaded and cached');
  } catch (error) {
    console.error('‚ùå Failed to load venues:', error);
  }
};


export const loadTeams = async (): Promise<void> => {
  if (teamsLoaded) return;

  try {
    // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º teamStorage.ts –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    let teams = await loadTeamList();

    if (teams && teams.length > 0) {
      cachedTeams = teams.reduce((acc, team) => {
        acc[team.id] = team;
        return acc;
      }, {} as Record<string, Team>);
      teamsLoaded = true;
      console.log('‚úÖ Teams loaded from teamStorage');
      return;
    }

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ teamStorage
    console.log('üì• Fetching team list from API (not in storage)...');
    const response = await apiService.fetchTeamList();
    console.log(`‚úÖ Fetched ${response.length} teams from API`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ teamStorage
    await saveTeamList(response);

    cachedTeams = response.reduce((acc, team) => {
      acc[team.id] = team;
      return acc;
    }, {} as Record<string, Team>);

    teamsLoaded = true;
    console.log('‚úÖ Teams loaded from API and saved via teamStorage');
  } catch (error) {
    console.error('‚ùå Failed to load teams:', error);
    teamsLoaded = true; // ‚Üê –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫—ç—à–∞
 */
const getTeamFromCache = (teamId: string): Team | undefined => {
  //console.log(`Looking up team in cache by ID: ${teamId}, Cache size: ${Object.keys(cachedTeams).length}`);
  const team = cachedTeams[teamId];
  //console.log(`Found team by [getTeamFromCache]. Team ID is:`, team.id);
  return team;
};


// –°–ª—É–∂–µ–±–Ω–∞—è
// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "3", "3–ë", "10–ü" ‚Üí 3, 3, 10
export const extractNumericScore = (score: string | number | null | undefined): number => {
  if (score == null) return 0;
  const scoreStr = String(score).trim();
  const match = scoreStr.match(/^\d+/);
  return match ? parseInt(match[0], 10) : 0;
};

// --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ApiEvent (–∏–∑ fetchEvents) –≤ Game, –∑–∞–ø–æ–ª–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫—ç—à–µ–π
 */
// data/gameData.ts

const convertApiEventToGame = async (
  apiEvent: ApiEvent | ApiGameDetailsResponse
): Promise<Game> => {
  const teamIds: string[] = apiEvent.teams;
  const leagueId: string = apiEvent.leagues[0]?.toString() || '';
  const seasonId: string = apiEvent.seasons[0]?.toString() || '';
  const venueId: string = apiEvent.venues[0]?.toString() || '';


  const homeTeamInfo = getTeamFromCache(teamIds[0]);
  const awayTeamInfo = getTeamFromCache(teamIds[1]);

  const leagueInfo = cachedLeagues[leagueId];
  const seasonInfo = cachedSeasons[seasonId];
  const venueInfo = cachedVenues[venueId];

  const hasResults = apiEvent.results && typeof apiEvent.results === 'object' && Object.keys(apiEvent.results).length > 0;
  const status = apiService.determineGameStatus(apiEvent.date, hasResults);

  // --- –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---
  let homeScoreRaw = '0';
  let awayScoreRaw = '0';
  let homeOutcome, awayOutcome;
  let team1_first, team1_second, team1_third;
  let team2_first, team2_second, team2_third;

  if (hasResults && homeTeamInfo && awayTeamInfo) {
    const homeTeamResults = (apiEvent.results as any)[homeTeamInfo.id];
    const awayTeamResults = (apiEvent.results as any)[awayTeamInfo.id];

    if (homeTeamResults && awayTeamResults) {
      homeScoreRaw = homeTeamResults.goals?.toString() || '0';
      awayScoreRaw = awayTeamResults.goals?.toString() || '0';

      homeOutcome = apiService.getOutcomeFromResult(homeTeamResults.outcome);
      awayOutcome = apiService.getOutcomeFromResult(awayTeamResults.outcome);

      team1_first = homeTeamResults.first?.toString() || '0';
      team1_second = homeTeamResults.second?.toString() || '0';
      team1_third = homeTeamResults.third?.toString() || '0';

      team2_first = awayTeamResults.first?.toString() || '0';
      team2_second = awayTeamResults.second?.toString() || '0';
      team2_third = awayTeamResults.third?.toString() || '0';
    }
  }

  // --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–¢–´ ---
  const isoDateString = apiEvent.date.replace(' ', 'T');
  const { date, time } = apiService.formatDateTime(isoDateString);

  // --- –õ–û–ì–û–¢–ò–ü–´ ---
  const homeTeamLogoUri = homeTeamInfo ? await loadTeamLogo(homeTeamInfo.id) ?? '' : '';
  const awayTeamLogoUri = awayTeamInfo ? await loadTeamLogo(awayTeamInfo.id) ?? '' : '';

  return {
    id: apiEvent.id.toString(),
    event_date: apiEvent.date,
    date,
    time,
    status,
    // –ö–æ–º–∞–Ω–¥—ã
    homeTeamId: teamIds[0],
    awayTeamId: teamIds[1],
    homeTeam: homeTeamInfo || undefined,
    awayTeam: awayTeamInfo || undefined,
    homeTeamLogo: homeTeamLogoUri,
    awayTeamLogo: awayTeamLogoUri,
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –í–°–ï –ö–ê–ö –°–¢–†–û–ö–ò
    homeScore: homeScoreRaw,
    awayScore: awayScoreRaw,
    homeGoals: extractNumericScore(homeScoreRaw),
    awayGoals: extractNumericScore(awayScoreRaw),
    homeOutcome,
    awayOutcome,
    // –ü–µ—Ä–∏–æ–¥—ã ‚Äî –ö–ê–ö –°–¢–†–û–ö–ò
    team1_first,
    team1_second,
    team1_third,
    team2_first,
    team2_second,
    team2_third,
    team1_goals: homeScoreRaw,   // ‚Üê —Å—Ç—Ä–æ–∫–∞
    team2_goals: awayScoreRaw,   // ‚Üê —Å—Ç—Ä–æ–∫–∞
    team1_outcome: homeOutcome,
    team2_outcome: awayOutcome,
    // –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    venue: venueInfo?.name || '',
    venue_name: venueInfo?.name || '',
    venueId,
    // –¢—É—Ä–Ω–∏—Ä –∏ —Å–µ–∑–æ–Ω
    tournament: leagueInfo?.name || '–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∏–π –º–∞—Ç—á',
    league: leagueInfo || undefined,
    leagueId,
    league_name: leagueInfo?.name || '–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∏–π –º–∞—Ç—á',
    season: seasonInfo || undefined,
    seasonId,
    season_name: seasonInfo?.name || '',
    // –í–∏–¥–µ–æ
    sp_video: (apiEvent as any).sp_video || '',
    videoUrl: (apiEvent as any).sp_video || '',
    protocol: (apiEvent as any).protocol || null,
    player_stats: (apiEvent as any).player_stats || null,
  };
};

/**
 * !!!–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!!!
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ApiGameDetailsResponse (–∏–∑ fetchEventById) –≤ Game, –∑–∞–ø–æ–ª–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫—ç—à–µ–π
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã.
 * !!!–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!!!
 */
const convertApiGameDetailsToGame = async (apiGameDetails: ApiGameDetailsResponse): Promise<Game> => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–∞–Ω–¥, –ª–∏–≥–∏, —Å–µ–∑–æ–Ω–∞, –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
  const teamIds: string[] = apiGameDetails.teams;
  const leagueId: string = apiGameDetails.leagues[0]?.toString() || '';
  const seasonId: string = apiGameDetails.seasons[0]?.toString() || '';
  const venueId: string = apiGameDetails.venues[0]?.toString() || '';

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏–∑ –∫—ç—à–∞
  const homeTeamInfo = getTeamFromCache(teamIds[0]);
  const awayTeamInfo = getTeamFromCache(teamIds[1]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–≥–µ, —Å–µ–∑–æ–Ω–µ, –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
  const leagueInfo = cachedLeagues[leagueId];
  const seasonInfo = cachedSeasons[seasonId];
  const venueInfo = cachedVenues[venueId];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
  // –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, –Ω–æ –Ω–µ "–∂–∏–≤–æ–π"
  const hasResults = apiGameDetails.results && Object.keys(apiGameDetails.results).length > 0;
  const status = apiService.determineGameStatus(apiGameDetails.date, hasResults);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  let homeGoals, awayGoals, homeOutcome, awayOutcome, team1_first, team1_second, team1_third, team2_first, team2_second, team2_third;
  if (homeTeamInfo && awayTeamInfo) {
    const homeTeamResults = apiGameDetails.results[homeTeamInfo.id];
    const awayTeamResults = apiGameDetails.results[awayTeamInfo.id];

    if (homeTeamResults && awayTeamResults) {
      homeGoals = safeInt(homeTeamResults.goals);
      awayGoals = safeInt(awayTeamResults.goals);
      homeOutcome = apiService.getOutcomeFromResult(homeTeamResults.outcome);
      awayOutcome = apiService.getOutcomeFromResult(awayTeamResults.outcome);
      team1_first = safeInt(homeTeamResults.first);
      team1_second = safeInt(homeTeamResults.second);
      team1_third = safeInt(homeTeamResults.third);
      team2_first = safeInt(awayTeamResults.first);
      team2_second = safeInt(awayTeamResults.second);
      team2_third = safeInt(awayTeamResults.third);
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º apiService.formatDateTime, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO –∏–ª–∏ 'YYYY-MM-DD HH:MM:SS'
  // apiGameDetails.date —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
  const { date, time } = apiService.formatDateTime(apiGameDetails.date); // <- –ò–°–ü–†–ê–í–õ–ï–ù–û

  // --- –ó–ê–ì–†–£–ñ–ê–ï–ú URI –õ–û–ì–û–¢–ò–ü–û–í –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê ---
  const homeTeamLogoUri = homeTeamInfo ? await loadTeamLogo(homeTeamInfo.id) : '';
  const awayTeamLogoUri = awayTeamInfo ? await loadTeamLogo(awayTeamInfo.id) : '';

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Game
  const game: Game = {
    id: apiGameDetails.id.toString(),
    event_date: apiGameDetails.date,
    date: date,
    time: time,
    status: status,
    // –ö–æ–º–∞–Ω–¥—ã
    homeTeamId: teamIds[0],
    awayTeamId: teamIds[1],
    homeTeam: homeTeamInfo || undefined,
    awayTeam: awayTeamInfo || undefined,
    homeTeamLogo: homeTeamLogoUri, // <- –¢–µ–ø–µ—Ä—å URI –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    awayTeamLogo: awayTeamLogoUri, // <- –¢–µ–ø–µ—Ä—å URI –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    homeScore: homeGoals,
    awayScore: awayGoals,
    homeGoals: homeGoals,
    awayGoals: awayGoals,
    homeOutcome: homeOutcome,
    awayOutcome: awayOutcome,
    // –ü–µ—Ä–∏–æ–¥—ã
    team1_first: team1_first,
    team1_second: team1_second,
    team1_third: team1_third,
    team2_first: team2_first,
    team2_second: team2_second,
    team2_third: team2_third,
    team1_goals: homeGoals,
    team2_goals: awayGoals,
    team1_outcome: homeOutcome,
    team2_outcome: awayOutcome,
    // –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    venue: venueInfo?.name || '',
    venue_name: venueInfo?.name || '',
    venueId: venueId, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å venue_id
    // –¢—É—Ä–Ω–∏—Ä –∏ —Å–µ–∑–æ–Ω
    tournament: leagueInfo?.name || '–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∏–π –º–∞—Ç—á',
    league: leagueInfo || undefined,
    leagueId: leagueId, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å league_id
    league_name: leagueInfo?.name || '–¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∏–π –º–∞—Ç—á', // –ù–æ–≤–æ–µ –ø–æ–ª–µ
    season: seasonInfo || undefined,
    seasonId: seasonId, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å season_id
    season_name: seasonInfo?.name || '',
    // –í–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    sp_video: apiGameDetails.sp_video || '',
    videoUrl: apiGameDetails.sp_video || '',
  };

  return game;
};

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–†–¢–ò–†–û–í–ö–ò –ò –§–û–õ–ë–≠–ö–ê ---

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: live -> —Å–µ–≥–æ–¥–Ω—è -> —Å–∫–æ—Ä–æ -> –ø–æ –¥–∞—Ç–µ
 * --- –û–ë–ù–û–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---
 */
const sortUpcomingGames = (games: Game[]): Game[] => {
  const now = new Date();

  return games.sort((a, b) => {
    const dateA = new Date(a.event_date);
    const dateB = new Date(b.event_date);

    // 1. LIVE games first
    if (a.status === 'live' && b.status !== 'live') return -1;
    if (b.status === 'live' && a.status !== 'live') return 1;

    // 2. Today games second (but not LIVE)
    const isTodayA = dateA.toDateString() === now.toDateString();
    const isTodayB = dateB.toDateString() === now.toDateString();
    if (a.status === 'upcoming' && isTodayA && b.status !== 'live' && !isTodayB) return -1;
    if (b.status === 'upcoming' && isTodayB && a.status !== 'live' && !isTodayA) return 1;

    // 3. Within 3 days games third
    const daysDiffA = Math.ceil((dateA.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    const isWithin3DaysA = daysDiffA >= 0 && daysDiffA <= 3;
    const daysDiffB = Math.ceil((dateB.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    const isWithin3DaysB = daysDiffB >= 0 && daysDiffB <= 3;
    if (a.status === 'upcoming' && isWithin3DaysA && b.status !== 'live' && !isTodayB && !isWithin3DaysB) return -1;
    if (b.status === 'upcoming' && isWithin3DaysB && a.status !== 'live' && !isTodayA && !isWithin3DaysA) return 1;

    // 4. Rest by date
    return dateA.getTime() - dateB.getTime();
  });
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ–ª–±—ç–∫ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
 */
const getFallbackUpcomingGames = (): Game[] => {
  console.warn('Using fallback upcoming games (empty array)');
  return [];
};

// --- –ö–û–ù–ï–¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ---

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π Map –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
const ongoingRequests = new Map<string, Promise<Game[]>>();
// --- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç apiService.fetchEvents –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
 */
/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 * --- –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ---
 */
export async function getGames(params: {
  date_from?: string;
  date_to?: string;
  league?: string;
  season?: string;
  teams?: string;
  useCache?: boolean;
  f2f?: boolean;
}): Promise<Game[]> {
  const cacheKey = JSON.stringify(params);
  const now = Date.now();

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ useCache !== false
  if (params.useCache !== false) {
    const cachedEntry = gamesCache[cacheKey];
    if (cachedEntry && now - cachedEntry.timestamp < GAMES_CACHE_DURATION) {
      console.log('‚úÖ Returning games from memory cache for key:', cacheKey);
      return cachedEntry.data;
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥—ë—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
  if (ongoingRequests.has(cacheKey)) {
    console.log('‚è≥ Waiting for ongoing request for key:', cacheKey);
    return await ongoingRequests.get(cacheKey)!;
  }

  // 3. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  const requestPromise = (async (): Promise<Game[]> => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
      await loadLeagues();
      await loadSeasons();
      await loadVenues();
      await loadTeams();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
      const apiParams: Record<string, string> = {};
      for (const key in params) {
        if (key !== 'teams' && params[key as keyof typeof params]) {
          apiParams[key] = String(params[key as keyof typeof params]);
        }
      }
      if (params.teams) {
        const teamList = params.teams
          .split(/[,| ]+/)
          .filter(id => id.trim() !== '');
        const separator = params.f2f ? '|' : ',';
        apiParams.teams = teamList.join(separator);
      }

      // –ó–∞–ø—Ä–æ—Å –∫ API
      const response = await apiService.fetchEvents(apiParams);
      const apiEvents = response.data;

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Game[]
      const games: Game[] = [];
      for (const apiEvent of apiEvents) {
        const game = await convertApiEventToGame(apiEvent);
        games.push(game);
      }

      const sortedGames = sortUpcomingGames(games);
      console.log(`‚úÖ Loaded ${sortedGames.length} games with params:`, params);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      if (params.useCache !== false) {
        gamesCache[cacheKey] = {
          data: sortedGames,
          timestamp: now,
        };
        console.log('üíæ Saved to memory cache for key:', cacheKey);
      }

      return sortedGames;
    } catch (error) {
      console.error('‚ùå Error in getGames:', error);
      return getFallbackUpcomingGames();
    } finally {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–∏—Å –∏–∑ ongoingRequests
      ongoingRequests.delete(cacheKey);
    }
  })();

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –≤ ongoingRequests
  ongoingRequests.set(cacheKey, requestPromise);

  return await requestPromise;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É –ø–æ ID —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 * –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ –∫—ç—à–µ –æ–±—â–∏—Ö –∏–≥—Ä (gamesCache –∏ upcomingGamesMasterCache),
 * –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ event-by-id.
 * –ï—Å–ª–∏ useCache = false ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –í–°–ï –∫—ç—à–∏ –∏ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç –≤ API.
 */
export const getGameById = async (id: string, useCache = true): Promise<Game | null> => {
  const now = Date.now();
  console.log(`üîç getGameById called for ID ${id}, useCache=${useCache}`);

  // üî• –ï—Å–ª–∏ useCache = false ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –í–°–ï –∫—ç—à–∏ –∏ –∏–¥—ë–º —Å—Ä–∞–∑—É –≤ API
  if (!useCache) {
    console.log(`üöÄ Bypassing all caches for ID ${id} (force refresh)`);
  } else {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–µ—Ç–∞–ª–µ–π (gameDetailsCache)
    if (gameDetailsCache[id]) {
      const cached = gameDetailsCache[id];
      if (now - cached.timestamp < GAME_DETAILS_CACHE_DURATION) {
        console.log(`‚úÖ Game details for ID ${id} returned from gameDetailsCache`);
        return cached.data;
      }
    }

    // 2. –ò—â–µ–º –∏–≥—Ä—É –≤ –û–ë–©–ï–ú –∫—ç—à–µ –∏–≥—Ä (gamesCache)
    for (const cacheKey in gamesCache) {
      const entry = gamesCache[cacheKey];
      if (entry && now - entry.timestamp < GAMES_CACHE_DURATION) {
        const found = entry.data.find(g => g.id === id);
        if (found) {
          console.log(`‚úÖ Game ID ${id} found in gamesCache (key: ${cacheKey})`);
          gameDetailsCache[id] = { data: found, timestamp: now };
          return found;
        }
      }
    }

    // 3. –ò—â–µ–º –≤ –º–∞—Å—Ç–µ—Ä-–∫—ç—à–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä
    if (upcomingGamesMasterCache && now - upcomingGamesMasterCache.timestamp < UPCOMING_MASTER_CACHE_DURATION) {
      const found = upcomingGamesMasterCache.data.find(g => g.id === id);
      if (found) {
        console.log(`‚úÖ Game ID ${id} found in upcomingGamesMasterCache`);
        gameDetailsCache[id] = { data: found, timestamp: now };
        return found;
      }
    }
  }

  // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API (–ª–∏–±–æ –ø–æ—Ç–æ–º—É —á—Ç–æ useCache=false, –ª–∏–±–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫—ç—à–∞—Ö)
  try {
    await loadLeagues();
    await loadSeasons();
    await loadVenues();
    await loadTeams();

    const apiGameDetails = await apiService.fetchEventById(id);
    const game = await convertApiEventToGame(apiGameDetails);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ useCache !== false
    if (useCache) {
      gameDetailsCache[id] = { data: game, timestamp: now };
      console.log(`üíæ Game details for ID ${id} saved to memory cache (from API)`);
    } else {
      console.log(`üíæ Game details for ID ${id} loaded from API (not cached due to useCache=false)`);
    }
    return game;
  } catch (error) {
    console.error(`‚ùå Failed to get game by ID ${id} from API:`, error);
    return null;
  }
};

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –∫—ç—à
 */
function isCacheValid<T>(cache: CachedData<T> | null): boolean {
  if (!cache) return false;
  return Date.now() - cache.timestamp < CACHE_DURATION;
}
// --- –ö–û–ù–ï–¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ---


// --- –ú–∞—Å—Ç–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä ---
//let upcomingGamesMasterCache: { data: Game[]; timestamp: number } | null = null;
//const UPCOMING_MASTER_CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
//let isMasterDataLoading = false; // <-- –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
//let masterDataLoadPromise: Promise<Game[]> | null = null; // <-- –ò —ç—Ç–∞ —Ç–æ–∂–µ
/**
* –ú–∞—Å—Ç–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä –∫–æ–º–∞–Ω–¥—ã 74.
* –î–µ–ª–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
* --- –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç getGames —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ ---
* –î–∏–∞–ø–∞–∑–æ–Ω: —Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ 37 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥.
*/
export async function getUpcomingGamesMasterData(forceRefresh = false): Promise<Game[]> {
  const now = Date.now();

  // ‚úÖ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥—ë—Ç –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∞ (–¥–∞–∂–µ –ø—Ä–∏ forceRefresh)
  if (isMasterDataLoading && masterDataLoadPromise) {
    console.log('‚è≥ Master data loading is already in progress, waiting... (even with forceRefresh)');
    return await masterDataLoadPromise;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (!forceRefresh && isCacheValid(upcomingGamesMasterCache)) {
    console.log('‚úÖ Returning master upcoming games data from cache');
    return upcomingGamesMasterCache!.data;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  isMasterDataLoading = true;
  masterDataLoadPromise = (async () => {
    try {
      console.log(forceRefresh ? 'üîÑ Force-refreshing master upcoming games from API...' : 'üîÑ Loading master upcoming games from API...');
      const nowDate = new Date();
      const futureDate = new Date(nowDate);
      futureDate.setDate(futureDate.getDate() + 137);
      const todayString = nowDate.toISOString().split('T')[0];
      const futureDateString = futureDate.toISOString().split('T')[0];

      const games = await getGames({
        date_from: todayString,
        date_to: futureDateString,
        teams: '74',
        useCache: !forceRefresh,
      });

      const sortedGames = sortUpcomingGames(games);
      console.log(`Loaded ${sortedGames.length} master upcoming games`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –í–°–ï–ì–î–ê –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      upcomingGamesMasterCache = {
        data: sortedGames,
        timestamp: now,
      };

      return sortedGames;
    } catch (error) {
      console.error('‚ùå Failed to load master upcoming games:', error);
      return getFallbackUpcomingGames();
    } finally {
      isMasterDataLoading = false;
      masterDataLoadPromise = null;
    }
  })();

  return await masterDataLoadPromise;
}
// --- –ö–û–ù–ï–¶ –ú–ê–°–¢–ï–†-–§–£–ù–ö–¶–ò–ò ---

// --- –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É (–±–ª–∏–∂–∞–π—à–∞—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –∏–ª–∏ –∏–¥—É—â–∞—è)
 * –ò–≥—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (—Å 00:00 –¥–æ 23:59:59).
 * –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (LIVE).
 */
export async function getCurrentGame(forceRefresh = false): Promise<Game | null> {
  try {
    console.log('Getting current game from master data...');
    const allUpcomingGames = await getUpcomingGamesMasterData(forceRefresh);
    
    

    if (!allUpcomingGames || allUpcomingGames.length === 0) {
      return null;
    }

    const now = new Date();
    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // 00:00:00
    const todayEnd = new Date(todayStart);
    todayEnd.setDate(todayEnd.getDate() + 1); // 00:00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–±–ª–∏–∂–∞–π—à–∞—è –ø–µ—Ä–≤–∞—è)
    const sortedGames = [...allUpcomingGames].sort(
      (a, b) => new Date(a.event_date).getTime() - new Date(b.event_date).getTime()
    );

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è:
    // - –ª–∏–±–æ –∏–¥—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (LIVE: –∑–∞ 5 –º–∏–Ω –¥–æ ‚Äî –¥–æ 90 –º–∏–Ω –ø–æ—Å–ª–µ),
    // - –ª–∏–±–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–µ–≥–æ–¥–Ω—è (–¥–∞–∂–µ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å)
    const currentGame = sortedGames.find(game => {
      const gameDate = new Date(game.event_date);
      
      // LIVE: –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏ –¥–æ 90 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ
      const liveStart = new Date(gameDate.getTime() - 5 * 60 * 1000);
      const liveEnd = new Date(gameDate.getTime() + 90 * 60 * 1000);
      const isLive = now >= liveStart && now <= liveEnd;

      const isToday = gameDate >= todayStart && gameDate < todayEnd;

      return isLive || isToday;
    });

    if (currentGame) {
      console.log('Found current game:', currentGame.id);
      return currentGame;
    }

    console.log('No game found for current day or live window, returning NULL');
    return null;
  } catch (error) {
    console.error('Error getting current game from master data:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –∏–≥—Ä (–¥–æ 5 —à—Ç—É–∫), –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
 */
export async function getFutureGames(forceRefresh = false): Promise<Game[]> {
  try {
    console.log('Getting future games from master data...');
    const allUpcomingGames = await getUpcomingGamesMasterData(forceRefresh);

    const now = new Date();
    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const todayEnd = new Date(todayStart);
    todayEnd.setDate(todayEnd.getDate() + 1);

    // –§–∏–ª—å—Ç—Ä—É–µ–º: –∏—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "—Ç–µ–∫—É—â–∏–º–∏"
    const filteredGames = allUpcomingGames.filter(game => {
      const gameDate = new Date(game.event_date);
      
      // LIVE: –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏ –¥–æ 90 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ
      const liveStart = new Date(gameDate.getTime() - 5 * 60 * 1000);
      const liveEnd = new Date(gameDate.getTime() + 90 * 60 * 1000);
      const isLive = now >= liveStart && now <= liveEnd;

      const isToday = gameDate >= todayStart && gameDate < todayEnd;

      // –ò—Å–∫–ª—é—á–∞–µ–º, –µ—Å–ª–∏ –∏–≥—Ä–∞ "—Ç–µ–∫—É—â–∞—è" (LIVE –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
      return !(isLive || isToday);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    filteredGames.sort((a, b) => new Date(a.event_date).getTime() - new Date(b.event_date).getTime());

    // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5
    const futureGames = filteredGames.slice(0, 5);

    console.log(`Loaded ${futureGames.length} future games (after excluding current)`);
    return futureGames;
  } catch (error) {
    console.error('Error loading future games from master data:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä
 * --- –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç apiService.fetchEvents –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è count ---
 */
export async function getUpcomingGamesCount(): Promise<number> {
  try {
    console.log('Getting upcoming games count...');
    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫—ç—à
    const allUpcomingGames = await getUpcomingGamesMasterData(); // –≠—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à
    if (allUpcomingGames) {
      const count = allUpcomingGames.length;
      console.log('Upcoming games count (from master cache):', count);
      return count;
    }

    // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä-–∫—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ, —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
    const now = new Date();
    const futureDate = new Date(now);
    futureDate.setDate(futureDate.getDate() + 37);
    const todayString = now.toISOString().split('T')[0];
    const futureDateString = futureDate.toISOString().split('T')[0];

    const response = await apiService.fetchEvents({
      date_from: todayString,
      date_to: futureDateString,
      teams: '74',
    });
    const count = response.count || 0;
    console.log('Upcoming games count (from API):', count);
    return count;
  } catch (error) {
    console.error('Error getting upcoming games count:', error);
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö (–ø—Ä–æ—à–µ–¥—à–∏—Ö) –∏–≥—Ä
// –ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ—Ç –∂–µ apiService.fetchEvents, –Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ "–¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π"
// –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç getGames —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ "–¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π"
 */
export async function getPastGames(): Promise<Game[]> {
  try {
    console.log('Getting past games...');
    const now = new Date();
    const pastDate = new Date(now);
    pastDate.setMonth(pastDate.getMonth() - 6); // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    const pastDateString = pastDate.toISOString().split('T')[0];
    const todayString = now.toISOString().split('T')[0];

    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã, –¥–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
    const games = await getGames({ date_from: pastDateString, date_to: todayString });
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
    games.sort((a, b) => new Date(b.event_date).getTime() - new Date(a.event_date).getTime());

    console.log(`Loaded ${games.length} past games`);
    return games;
  } catch (error) {
    console.error('Error loading past games:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç getGames —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ "–¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç .count –∏–∑ API
 */
export async function getPastGamesCount(): Promise<number> {
  try {
    console.log('Getting past games count...');
    const now = new Date();
    const pastDate = new Date(now);
    pastDate.setMonth(pastDate.getMonth() - 6); // –°—á–∏—Ç–∞–µ–º –∏–≥—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    const pastDateString = pastDate.toISOString().split('T')[0];
    const todayString = now.toISOString().split('T')[0];

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ count, –Ω–µ –∑–∞–≥—Ä—É–∂–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const response = await apiService.fetchEvents({ date_from: pastDateString, date_to: todayString });
    const count = response.count || 0;
    console.log('Past games count:', count);
    return count;
  } catch (error) {
    console.error('Error getting past games count:', error);
    return 0;
  }
}

export const getStaleGameById = (id: string): Game | null => {
  const cached = gameDetailsCache[id];
  if (cached) {
    console.log(`üéÆ Returning STALE game details for ID ${id} (bypassing TTL)`);
    return cached.data;
  }
  return null;
};

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –∫—ç—à–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
export const isGameDetailsCacheFresh = (id: string): boolean => {
  const cached = gameDetailsCache[id];
  if (!cached) return false;
  return Date.now() - cached.timestamp < GAME_DETAILS_CACHE_DURATION;
};

export const getGameDetailsCacheKeys = (): string[] => {
  return Object.keys(gameDetailsCache);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–µ–Ω—ã –ø–æ ID –∏–∑ –∫—ç—à–∞
export const getVenueById = (id: string): ApiVenue | null => {
  return cachedVenues[id] || null;
};

export { gameDetailsCache, GAME_DETAILS_CACHE_DURATION };